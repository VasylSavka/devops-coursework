pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "devops-node-app:latest"
        CONTAINER_NAME = "devops-app"
        APP_PORT = "3000"
    }

    stages {

        stage('Checkout') {
            steps {
                // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–¥—É –∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
                git branch: 'main', url: 'https://github.com/VasylSavka/devops-coursework.git'
            }
        }

        stage('Terraform Init & Apply') {
            steps {
                // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è AWS credentials –∑ Jenkins Credentials
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                    string(credentialsId: 'teams-webhook', variable: 'TEAMS_WEBHOOK'),
                ]) {
                    dir('terraform') {
                        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Terraform —ñ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –¥–æ AWS
                        sh '''
                            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY

                            terraform init -reconfigure
                            terraform apply -auto-approve -var="teams_webhook_url=$TEAMS_WEBHOOK"
                        '''
                    }
                }
            }
        }

        stage('Build Docker image') {
            steps {
                // –ü–æ–±—É–¥–æ–≤–∞ Docker-–æ–±—Ä–∞–∑—É
                sh 'docker build -t $DOCKER_IMAGE .'
            }
        }

        stage('Deploy container') {
            steps {
                // –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                sh '''
                    docker stop $CONTAINER_NAME || true
                    docker rm $CONTAINER_NAME || true
                    docker run -d --name $CONTAINER_NAME -p $APP_PORT:3000 $DOCKER_IMAGE
                '''
            }
        }

        stage('Healthcheck') {
            steps {
                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ healthcheck
                script {
                    timeout(time: 30, unit: 'SECONDS') {
                        waitUntil {
                            def health = sh(script: "docker inspect --format='{{.State.Health.Status}}' $CONTAINER_NAME", returnStdout: true).trim()
                            echo "Container health: ${health}"
                            return (health == "healthy")
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Teams –ø—Ä–∏ —É—Å–ø—ñ—à–Ω–æ–º—É –¥–µ–ø–ª–æ—ó
            echo "‚úÖ Service is up and healthy."
            withCredentials([string(credentialsId: 'teams-webhook', variable: 'TEAMS_WEBHOOK')]) {
                sh '''
                    chmod +x ./send-teams.sh
                    ./send-teams.sh "‚úÖ Deployment succeeded on Jenkins üîµ" "$TEAMS_WEBHOOK"
                '''
            }
        }

        failure {
            // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Teams –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            echo "‚ùå Build failed or service not healthy."
            withCredentials([string(credentialsId: 'teams-webhook', variable: 'TEAMS_WEBHOOK')]) {
                sh '''
                    chmod +x ./send-teams.sh
                    ./send-teams.sh "‚ùå Deployment failed on Jenkins üî¥" "$TEAMS_WEBHOOK"
                '''
            }
        }
    }
}
